
//! Autogenerated weights for `pallet_grants`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-12-20, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `user`, CPU: `12th Gen Intel(R) Core(TM) i9-12900H`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("imbue-dev")`, DB CACHE: `1024`

// Executed Command:
// ./target/release/imbue
// benchmark
// pallet
// --chain=imbue-dev
// --steps=50
// --repeat=20
// --pallet=pallet_grants
// --extrinsic=*
// --output=./pallets/grants/src/weights.rs
// --template=./scripts/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;
use crate::WeightInfoT;

/// Weights for `pallet_grants` using the Substrate node and recommended hardware.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfoT for WeightInfo<T> {
	/// Storage: `ImbueGrants::GrantsSubmitted` (r:1 w:1)
	/// Proof: `ImbueGrants::GrantsSubmitted` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `ImbueProposals::ProjectCount` (r:1 w:1)
	/// Proof: `ImbueProposals::ProjectCount` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Deposits::TicketId` (r:1 w:1)
	/// Proof: `Deposits::TicketId` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Deposits::CurrentDeposits` (r:0 w:1)
	/// Proof: `Deposits::CurrentDeposits` (`max_values`: None, `max_size`: Some(66), added: 2541, mode: `MaxEncodedLen`)
	/// Storage: `ImbueGrants::GrantsSubmittedBy` (r:0 w:1)
	/// Proof: `ImbueGrants::GrantsSubmittedBy` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	/// Storage: `ImbueProposals::Projects` (r:0 w:1)
	/// Proof: `ImbueProposals::Projects` (`max_values`: None, `max_size`: Some(36455), added: 38930, mode: `MaxEncodedLen`)
	/// Storage: `ImbueProposals::IndividualVoteStore` (r:0 w:1)
	/// Proof: `ImbueProposals::IndividualVoteStore` (`max_values`: None, `max_size`: Some(16571), added: 19046, mode: `MaxEncodedLen`)
	fn create_and_convert() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `369`
		//  Estimated: `3593`
		// Minimum execution time: 173_015_000 picoseconds.
		Weight::from_parts(187_411_000, 3593)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(8_u64))
	}
}

// For backwards compatibility and tests.
impl WeightInfoT for () {
	/// Storage: `ImbueGrants::GrantsSubmitted` (r:1 w:1)
	/// Proof: `ImbueGrants::GrantsSubmitted` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `ImbueProposals::ProjectCount` (r:1 w:1)
	/// Proof: `ImbueProposals::ProjectCount` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Deposits::TicketId` (r:1 w:1)
	/// Proof: `Deposits::TicketId` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Deposits::CurrentDeposits` (r:0 w:1)
	/// Proof: `Deposits::CurrentDeposits` (`max_values`: None, `max_size`: Some(66), added: 2541, mode: `MaxEncodedLen`)
	/// Storage: `ImbueGrants::GrantsSubmittedBy` (r:0 w:1)
	/// Proof: `ImbueGrants::GrantsSubmittedBy` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	/// Storage: `ImbueProposals::Projects` (r:0 w:1)
	/// Proof: `ImbueProposals::Projects` (`max_values`: None, `max_size`: Some(36455), added: 38930, mode: `MaxEncodedLen`)
	/// Storage: `ImbueProposals::IndividualVoteStore` (r:0 w:1)
	/// Proof: `ImbueProposals::IndividualVoteStore` (`max_values`: None, `max_size`: Some(16571), added: 19046, mode: `MaxEncodedLen`)
	fn create_and_convert() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `369`
		//  Estimated: `3593`
		// Minimum execution time: 173_015_000 picoseconds.
		Weight::from_parts(187_411_000, 3593)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(8_u64))
	}
}