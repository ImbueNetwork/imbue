#![cfg_attr(not(feature = "std"), no_std)]

//FELIX REVIEW: Eventually it will be nice to have a short introduction here explaining what this pallet does and the
// avaliable methods etc.

// 1: Raise dispute from DisputeRaiser.
// - Dispute::new() - setup the state for dispute. This also has to put in storage when a dispute is finalising.

// 2: Vote on dispute. 
// vote stacking needs fixing - mutate vote if already voted. 

// 3: finalise it in the on_initialize hook.
// Signal that this is ready for continuation. pallet-refund/pallet-proposals.
// Refund, Everythings ok. 

// 4: an extrinsic is called claim_back(parameter: who, where.)

pub use pallet::*;
pub mod impls;
pub mod traits;
use core::fmt::Debug;
use frame_support::{pallet_prelude::*, weights::Weight};

#[frame_support::pallet]
pub mod pallet {
    use super::*;
    use codec::{FullCodec, FullEncode};
    use frame_system::pallet_prelude::*;
    use sp_runtime::traits::AtLeast32BitUnsigned;
    use traits::DisputeHooks;

    #[pallet::pallet]
    pub struct Pallet<T>(_);

    pub(crate) type AccountIdOf<T> = <T as frame_system::Config>::AccountId;

    #[pallet::config]
    //FELIX Review: Comment each of the config items so we know exactly what they are doing.
    pub trait Config: frame_system::Config {
        type RuntimeEvent: From<Event<Self>> + IsType<<Self as frame_system::Config>::RuntimeEvent>;
        /// The weights generated by the benchmarks.
        type WeightInfo: WeightInfoT;
        //Felix teachings --> to keep an associated type into storage it needs to implement certain traits
        type DisputeKey: AtLeast32BitUnsigned
            + FullEncode
            + FullCodec
            + MaxEncodedLen
            + TypeInfo
            + Debug;
        /// This is the max length for specifying the reason while raising the dispute
        type MaxReasonLength: Get<u32>;
        /// This is number of juries that can be assigned to a given dispute
        type MaxJurySize: Get<u32>;
        type DisputeHooks: traits::DisputeHooks<Self::DisputeKey>;
        /// The amount of time a dispute takes to finalise.
        type VotingTimeLimit: Get<<Self as frame_system::Config>::BlockNumber>;

        type ForceOrigin: EnsureOrigin<Self::RuntimeOrigin>;
    }

    /// Used to store the disputes that is being raised, given the dispute key it returns the Dispute
    /// Key: DisputeKey
    /// Value: Dispute<T>
    #[pallet::storage]
    #[pallet::getter(fn disputes)]
    pub type Disputes<T: Config> =
        StorageMap<_, Blake2_128Concat, T::DisputeKey, Dispute<T>, OptionQuery>;

    /// Stores the dispute keys that will finalise on a given block.
    /// Key: BlockNumber
    /// Value: Vec<DisputeKey>
    #[pallet::storage]
    pub type DisputesFinaliseOn<T: Config> =
        StorageMap<_, Blake2_128Concat, <T as frame_system>::BlockNumber, BoundedVec<T::DisputeKey, ConstU32<1000>>, OptionQuery>;

    #[pallet::event]
    // FELIX REVIEW: the below generate_deposit line is depricated in the 9.0.43 so you can remove it completely.
    #[pallet::generate_deposit(pub(super) fn deposit_event)]
    pub enum Event<T: Config> {

        //This event is emitted whenever a dispute has been successfully raised
        DisputeRaised{
            dispute_key: T::DisputeKey
        },
        // This event is emitted whenever there has been a voting successfully happened for a given dispute by
        // the authorized jury member
        DisputeVotedOn { who: AccountIdOf<T> },
        /// A dispute has been completed.
        DisputeCompleted,
        //This event is emitted when the dispute is being cancelled
        DisputeCancelled,
    }

    #[pallet::error]
    pub enum Error<T> {
        /// This error is thrown whenever the dispute key passed doesn't correspond to any dispute.
        DisputeDoesNotExist,
        /// Dispute already exists for this dispute id.
        DisputeAlreadyExists,
        // This account is not part of the specified jury.
        InvalidJuryAccount,
    }

    #[pallet::hooks]
    impl<T: Config> Hooks<BlockNumberFor<T>> for Pallet<T> {
        fn on_initialize(_n: BlockNumberFor<T>) -> Weight {

        }
    }

    #[pallet::call]
    impl<T: Config> Pallet<T> {
        #[pallet::call_index(0)]
        // FELIX: BENCHMARK
        #[pallet::weight(<T as Config>::WeightInfo::vote_on_dispute())]
        pub fn vote_on_dispute(
            origin: OriginFor<T>,
            dispute_key: T::DisputeKey,
            is_yay: bool,
        ) -> DispatchResult {
            // get dispute struct
            // ensure caller is part of the jury
            // mutate vote accordingly.
            let who = ensure_signed(origin)?;

            // NO CHECK TO DOUBLE VOTE

            //iterate over the disputes and update the voting state based on the passed vote
            //SHANKAR I was thinking of returning out the updated vote to calculate the finalization?
            // FELIX REVIEW: for now leave it, and allow votes to be mutable
            Disputes::<T>::try_mutate(dispute_key, |dispute| {
                if let Some(d) = dispute {
                    ensure!(
                        d.jury.iter().any(|e| e == &who),
                        Error::<T>::InvalidJuryAccount
                        let mut vote = &mut d.votes;
                    );
                    if is_yay {
                        vote.yay = vote.yay.saturating_add(1);
                    } else {
                        vote.nay = vote.nay.saturating_add(1);
                    }
                    Ok(())
                } else {
                    Err(Error::<T>::DisputeDoesNotExist)
                }
            });
            Self::deposit_event(Event::<T>::DisputeVotedOn { who });
            Ok(().into())
        }

        #[pallet::call_index(1)]
        // FELIX REVIEW: Benchmarks
        #[pallet::weight(<T as Config>::WeightInfo::force_cancel_dispute())]
        pub fn force_cancel_dispute(
            origin: OriginFor<T>,
            dispute_key: T::DisputeKey,
            is_yay: bool,
        ) -> DispatchResult {
            //ensuring the cancelling authority 
            <T as Config>::ForceOrigin::ensure_origin(origin)?;
            //calling the on_dispute cancel whenever the force cancel method is called
            <Self as DisputeHooks<T::DisputeKey>>::on_dispute_cancel(dispute_key);
            Ok(().into())
        }
    }

    #[derive(Encode, Decode, PartialEq, Eq, Clone, Debug, TypeInfo, MaxEncodedLen)]
    #[scale_info(skip_type_params(T))]
    pub struct Dispute<T: Config> {
        /// Who this was raised by.
        pub raised_by: AccountIdOf<T>,
        /// The votes of each jury.
        pub votes: BoundedBTreeMap<AccountIdOf<T>, Vote, T::MaxJurySize>,
        /// The reason the dispute was raised.
        pub reason: BoundedVec<u8, <T as Config>::MaxReasonLength>,
        /// The party responsible for the vote.
        pub jury: BoundedVec<AccountIdOf<T>, <T as Config>::MaxJurySize>,
    }

    impl<T: Config> Dispute<T> {
        
        // Create a new dispute and setup state so that pallet will operate as intended.
        pub fn new(dispute_key: T::DisputeKey, raised_by: AccountIdOf<T>, reason: BoundedVec<u8, T::MaxReasonLength>, jury: BoundedVec<AccountIdOf<T>, T::MaxJurySize>) -> Result<(), DispatchError>{
            let dispute = Self {
                raised_by,
                reason,
                jury,
                votes: Default::default(),
            };
            let final_block = frame_system::Pallet<T>::block_number();

            Disputes::<T>::insert(dispute_key, dispute);
            DisputesFinaliseOn::<T>::insert(final_block.saturating_add(T::VotingTimeLimit::get()));

            Self::deposit_event(Event::<T>::DisputeRaised {dispute_key});
            Ok(())
        } 
        
        pub fn remove(key: T::DisputeKey) -> Result<(), Dispatch> {
            // remove
            // Dispute,
            // DisputeFInaliseOm
        }
    }

    #[derive(Encode, Decode, PartialEq, Eq, Clone, Debug, TypeInfo, MaxEncodedLen)]
    pub struct Vote {
        pub percent_refund: Percent, // 100
        pub percent_to_freelancer: Percent, // 0 - 100
    }

    enum Outcome {
        Refund,
        Continue,
        Slash,
    }
}

pub trait WeightInfoT {
    fn vote_on_dispute() -> Weight;
    fn force_cancel_dispute() -> Weight;
    fn raise_dispute() -> Weight;
    fn on_dispute_complete() -> Weight;
    fn on_dispute_cancel() -> Weight;
}
