//! Autogenerated weights for proposals
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-04-16, STEPS: `1`, REPEAT: 2, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("local"), DB CACHE: 1024

// Executed Command:
// target/debug/imbue-collator
// benchmark
// --chain=local
// --steps=1
// --repeat=2
// --pallet=proposals
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=example_weights.rs
// --template=./scripts/frame-weight-template.hbs

#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for proposals.
pub trait WeightInfo {	fn create_project(a: u32, ) -> Weight;	fn schedule_round() -> Weight;}

/// Weights for proposals using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {	fn create_project(a: u32, ) -> Weight {
		(1_766_070_000 as Weight)			// Standard Error: 1_767_000
			.saturating_add((6_000 as Weight).saturating_mul(a as Weight))			.saturating_add(T::DbWeight::get().reads(2 as Weight))			.saturating_add(T::DbWeight::get().writes(2 as Weight))	}	fn schedule_round() -> Weight {
		(1_640_783_000 as Weight)			.saturating_add(T::DbWeight::get().reads(2 as Weight))			.saturating_add(T::DbWeight::get().writes(2 as Weight))	}}

// For backwards compatibility and tests
impl WeightInfo for () {	fn create_project(a: u32, ) -> Weight {
		(1_766_070_000 as Weight)			// Standard Error: 1_767_000
			.saturating_add((6_000 as Weight).saturating_mul(a as Weight))			.saturating_add(RocksDbWeight::get().reads(2 as Weight))			.saturating_add(RocksDbWeight::get().writes(2 as Weight))	}	fn schedule_round() -> Weight {
		(1_640_783_000 as Weight)			.saturating_add(RocksDbWeight::get().reads(2 as Weight))			.saturating_add(RocksDbWeight::get().writes(2 as Weight))	}}
